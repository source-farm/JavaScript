
//------------------------------------------------------------------------------
// Document object model
//------------------------------------------------------------------------------

// После загрузки html документа браузер анализирует этот документ и строит на
// его основе так называемую объектную модель документа, которую по-другому
// ещё называют DOM(document object model). Это DOM доступен скриптам,
// написанным на JavaScript: изменение чего-либо в DOM'е сразу перехватывается
// браузером и обновляется внешний вид страницы. Доступ к DOM'у осуществляется
// через глобальный объект document. Свойство documentElement объекта document
// указывает на элемент html, который есть у любого HTML документа. Также у
// document'а есть свойства head и body, который указывают на элементы head и
// body страницы соответственно. У каждого узла DOM'а есть свойство nodeType,
// который определяет его тип: элемент, текст и т.д.:
console.log(document.documentElement.nodeType == Node.ELEMENT_NODE); // true

//------------------------------------------------------------------------------
// Обход DOM'а
//------------------------------------------------------------------------------

// Для обхода древовидной структуры DOM'а существует несколько свойств:
console.log(document.body.childNodes);                // Получение всех дочерних элементов.
console.log(document.body.children);                  // Получение дочерних элементов-узлов.
console.log(document.body.firstChild);                // Первый дочерний элемент.
console.log(document.body.lastChild);                 // Последний дочерний элемент.
console.log(document.body.firstChild.nextSibling);    // Следующий ровесник.
console.log(document.body.lastChild.previousSibling); // Предыдущий ровесник.

//------------------------------------------------------------------------------
// Поиск элементов
//------------------------------------------------------------------------------

// Для поиска элементов существует несколько методов. Метод getElementsByTagName
// находит все элементы с указанным тегом в дереве, корнем которого является
// узел, для которого был вызван этот метод:

let linkElement = document.body.getElementsByTagName("a")[0];
console.log(linkElement.href);

// Найти элемент по id можно так:
let h1Element = document.getElementById("main_header");
console.log(h1Element.textContent);

// Также можно поискать элементы по принадлежности к определённому классу:
let p = document.body.getElementsByClassName("text")[0];
console.log(p.textContent);

// Элементы можно также искать с помощью синтаксиса селекторов CSS:
let link = document.body.querySelectorAll("p > a"); // Дочерний элемент a внутри элемента p.
console.log(link[0].href);

//------------------------------------------------------------------------------
// Изменение структуры документа
//------------------------------------------------------------------------------

// Фактически всё в структуре DOM'а может быть изменено. У элементов-узлов есть
// метод remove, который позволяет отвязать его от родителя. Метод appendChild
// добавляет узел в конец текущих дочерних узлов, а insertBefore - вставляет
// узел, переданный в первом параметре, до узла во втором. Последние два метода
// отвязывают узел от старого родителя, если он у него был, т.к. узел может
// существовать только в одном месте DOM'а. Есть также метод replaceChild,
// который позволяет заменить один узел другим.

//------------------------------------------------------------------------------
// Создание элементов
//------------------------------------------------------------------------------

// Текстовые элементы можно создавать с помощью createTextNode, а обычные
// элементы с помощью createElement, передав в качестве первого аргумента
// название элемента:

let paragraph = document.createElement("p");
let paragraphText = document.createTextNode("Code generated paragraph");
paragraph.appendChild(paragraphText);
document.body.appendChild(paragraph);

//------------------------------------------------------------------------------
// Атрибуты
//------------------------------------------------------------------------------

// Доступ к основным атрибутам осуществляется через одноимённое свойство
// объекта. Доступ к нестандартным атрибутам можно получить с помощью методов
// getAttribute и setAttribute:
let h = document.getElementById("main_header");
console.log(h.getAttribute("data-custom-attr"));

// Принято начинать названия нестандартных атрибутов с "data-". Доступ к
// атрибуту class можно получить с помощью свойства className:
console.log(document.body.getElementsByTagName("p")[0].className);
