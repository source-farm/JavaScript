
//------------------------------------------------------------------------------
// Замыкания
//------------------------------------------------------------------------------

// JavaScript поддерживает замыкания. Легче объяснить, что это такое на
// следующем примере:
function wrapValue(value) {
    let local = value;
    return () => local; // Функция без аргументов, которая возвращает local.
}

let wrap1 = wrapValue(1);
let wrap2 = wrapValue(2);
console.log(wrap1());
console.log(wrap2());

// Внутри функции wrapValue создаётся локальное связывание local, которое
// указывает на значение в переданном аргументе value. Функция wrapValue
// возвращает стрелочную функцию, которая возвращает значение локальной
// переменной local. После вызова wrapValue каждый раз создаётся новое
// локальное связывание local и оно никуда не исчезает даже после окончания
// вызова функции, т.к. на local ссылается стрелочная функция. Результатом
// такого поведения является то, что после каждого вызова wrapValue возвращает
// новую функцию, которая возвращает значение, которое было передано wrapValue.
// Такое поведение называют замыканием. Одновременно замыканием также называют
// функцию, которая получает доступ к локальным связываниям(в нашем случае это
// стрелочная функция).

// Замыкания позволяют реализовать интересный функционал. Например, можно
// создавать функции, которые будут умножать на определённое число:
function multiplier(factor) {
    return x => x * factor;
}

let twice = multiplier(2);
let triple = multiplier(3);
console.log(twice(3));
console.log(triple(3));

// Здесь мы не создавали явно локальное связывание для хранения множителя, т.к.
// локальный параметр функции уже является связыванием(в примере выше локальное
// связывание было создано лишь для демонстрационных целей).
