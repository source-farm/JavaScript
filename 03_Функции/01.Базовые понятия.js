 
//------------------------------------------------------------------------------
// Определение и объявление
//------------------------------------------------------------------------------

// Функция - это такое же определение связывания, только значением связывания
// является функция:

// Пример функции с одним параметром.
const square = function(x) {
    return x * x;
};
console.log(square(2));

// Пример функции без параметров.
const makeNoise = function() {
    console.log("Pling!");
};
makeNoise();

// Пример функции с двумя параметрами.
const power = function(base, exponent) {
    let result = 1;
    for (let count = 0; count < exponent; ++count) {
        result *= base;
    }
    return result;
};
console.log(power(2, 3));

// return определяет значение, которое возвращает функция. Если return не
// указать, то функция возвращает undefined. Если указать пустой return(т.е.
// return;), то тоже будет возвращено undefined.

// Также связывание функции необъязательно нужно определять явным образом с
// помощью let или const. Можно объявить функции и так:
function greet() {
    console.log("HELLO");
}
greet();

// В этом случае функция видна в любом месте блока, в котором она объявлена,
// даже если она используется до объявления:
console.log(future());
function future() {
    return "call before declaration";
}
console.log();
 
//------------------------------------------------------------------------------
// Область видимости
//------------------------------------------------------------------------------

// Каждое связывание обладает областью видимости - та часть кода программа
// откуда можно обращаться к этому связыванию. Связывания, которе определены
// вне каких-либо функций или блоков, называются глобальными. К ним можно
// обращаться из любого места программы.

// Парамеры функции, а также связывания, которые определены внутри функции,
// называются локальными связываниями. К ним имеется доступ из фукнции, в
// которой они определены.

// Связывания, которые были объявлены с помощью ключевых слов let и const на
// самом деле являются локальными по отношению к блоку, в котором они были
// объявлены. В JavaScript до 2015 г. только функции создавали новую область
// видимости. Поэтому объявления в старом стиле с помощью var'а видны в любом
// месте функции или в глобальной области видимости, если они не объявлены
// внутри функции:

let x = 1;
// Искусственно создаём новый блок.
{
    let y = 2;
    var z = 3;
    console.log(x + y + z); // 6
}

// В этом месте кода связывание y не видно, но зато видно x и z:
console.log(x + z); // 4
console.log();

// Блоки и функции могут быть вложенными друг в друга. Если связывание не
// найдено в текущем блоке или функции, то поиск продолжается в внешнем блоке
// или функции и т.д. пока не дойдём до глобальной области видимости(это так
// называемая лексическая область видимости(lexical scoping)).
 
//------------------------------------------------------------------------------
// Функции как значения
//------------------------------------------------------------------------------

// В JavaScript функции являются значениями: их можно передавать или возвращать
// из функций, присваивать связываниям и т.д. После того как мы определили
// функцию в следующем коде, мы сразу же указываем название связывания, через
// которое можно обращаться к этой функции.
let foo = function() {
    console.log("foo");
};
foo();

// Но на эту же функцию может указывать и другое связывание:
let bar = foo;
bar();

// Не константное связывание необъязательно должно указывать на одну и ту же
// функции(или вообще на функцию):
bar = function() {
    console.log("bar");
};
bar();
