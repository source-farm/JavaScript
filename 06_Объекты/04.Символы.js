
// Допустим у нас есть некий объект, для которого метод toString делает что-то
// другое, чем обычное преобразование объекта в строку, например, превращает
// его в клубок ниток(т.е. какой-то объект, который представляет собой клубок
// ниток). Получается метод toString для этого объекта имеет совсем другое
// значение, чем ожидается стандартным поведением: не может быть такого, чтобы
// объект удовлетворял одновременно этому новому поведению и стандартному.
// Для решения этой проблемы в JavaScript появились символы. Создаются они с
// помощью функции Symbol и один символ никогда не может быть равен другому:
let sym = Symbol("name");
console.log(sym == Symbol("name")); // false

// Параметр, который передаётся функции Symbol используется только в отладочных
// целях: он выводится при преобразовании символа в строку для вывода на
// консоль. Больше ни на что этот параметр не влияет. Два символа с одинаковым
// названием тоже не равны друг другу.
console.log(sym);
console.log(Symbol("id") == Symbol("id")); // false

// Обычно названия свойств являются строками, но это не строгое правило.
// Названия свойств также могут быть и символами:
function Rabbit(type) {
    this.type = type;
}
let symbol = Symbol("num");
Rabbit.prototype[symbol] = 42;    // Создаём свойство-символ.
let rabbit = new Rabbit("black"); // Прототипом для объектов, которые создаются с помощью new, является свойство
                                  // prototype функции, с помощью которой они создаются. Т.е. прототипом объекта
                                  // rabbit является Rabbit.prototype.
console.log(rabbit[symbol]);      // Осуществляем доступ к значению свойства-символа.

// То что символы являются уникальными и могут использоваться в качестве
// названий свойств позволяет нам использовать их вместе с другими свойствами,
// каким бы ни было их название:
const toStringSymbol = Symbol("toString");
Array.prototype[toStringSymbol] = function() {
    return `${this.length} cm of blue yarn`;
};

let array = [1, 2];
console.log(array.toString());
console.log(array[toStringSymbol]());
