
//------------------------------------------------------------------------------
// Обработка событий
//------------------------------------------------------------------------------

// Зарегистрировать обработчик, который будет вызван при нажатии и отпускании
// кнопки мыши можно так:
window.addEventListener("click", () => { console.log("You knocked?"); });

// window - это встроенный объект, который предоставляется браузером.
// Представляет из себя окно браузера.

// События всегда указываются для конкретного объекта. Например, в предыдущем
// примере мы создали обратчик нажатия на всё окно. Но можно создать и такой
// же обработчик для более мелкого объекта:
let button = document.querySelector("button");
button.addEventListener("click", () => { console.log("Button clicked."); });

// Также можно убрать обработчик события:
let onceButton = document.querySelectorAll("button")[1];
function once() {
    console.log("Done.");
    onceButton.removeEventListener("click", once);
}
onceButton.addEventListener("click", once);

// Также обработчику события передаётся так называемый объект события, который
// предоставляет более подробную информацию о событии:

function clickHandler(event) {
    if (event.button == 0)
        console.log("Left button");
    else if (event.button == 1)
        console.log("Middle button");
    else if (event.button == 2)
        console.log("Right button");
}

let btn = document.querySelectorAll("button")[2];
btn.addEventListener("click", clickHandler);

// Объект события хранит различную информацию для разных типов событий.

//------------------------------------------------------------------------------
// Распространение событий
//------------------------------------------------------------------------------

// Если событие произошло в каком-либо дочернем элемента узла, то это событие
// получает как этот элемент так и узел: при возникновении событие поднимается
// наверх по иерархию пока не доберётся до самого корня. При этом более высокий
// уровень уведомляется о событии после того как был закончен вызов обработчика
// этого события на более низком уровне. Можно также остановить распространение
// события вызовом метода stopPropagation объекта события.

// Также большинство объектов событий обладают свойством target, который
// позволяет идентифицировать элемент, в котором возникло событие.

//------------------------------------------------------------------------------
// Действие по-умолчанию
//------------------------------------------------------------------------------

// Для многих событий есть действие по-умолчанию. Например, если нажать на
// клавишу вниз, то страница прокрутится вниз; правая кнопка мыши вызывает
// контекстное меню и т.д. Пользовательский обработчик события будет вызван
// до выполнения действия по-умолчанию и если есть необходимость, то можно
// вообще заблокировать выполнение действия по-умолчанию с помощью метода
// preventDefault объекта события. Пример ссылки, по которой нельзя перейти:

let linkNot = document.getElementById("link_not");
linkNot.addEventListener("click", event => {
    console.log("Nope.");
    event.preventDefault();
});

//------------------------------------------------------------------------------
// События клавиатуры
//------------------------------------------------------------------------------

// При нажатии клавиши происходит событие "keydown", а при отпускании - "keyup":
window.addEventListener("keydown", event => {
    if (event.key == "v")
        document.body.style.background = "violet";
});

window.addEventListener("keyup", event => {
    if (event.key == "v")
        document.body.style.background = "";
});

// Если нажать клавишу и удерживать её в таком состоянии, то будут
// генерироваться множество событий "keydown", а не одно. О том что были
// нажаты комбинации клавиш с Shift, Ctrl или Alt можно узнать через свойства
// shiftKey, ctrlKey и altKey объекта события.

// Для того чтобы следить за тем, что пользователь набирает лучше
// воспользоваться событием "input" элемента ввода. Это событие генерится
// каждый раз, когда происходит изменение содержимого элемента ввода. После
// того как произошло событие "input" нужно вычитать содержимое элемента в
// фокусе.

//------------------------------------------------------------------------------
// События мыши
//------------------------------------------------------------------------------

// При нажатии кнопки мыши происходит событие "mousedown", после отпускания -
// "mouseup" и "click". Координаты в пикселях того места, где произошло событие
// мыши можно получить через свойства clientX и clientY объекта события. Эти
// свойства дают координаты отностительно левого верхнего угла окна браузера.
// Свойства pageX и pageY дают координаты относительно всего документа. Пример:

// Рисование точек в том месте, куда нажали мышкой.
window.addEventListener("click", event => {
    let dot = document.createElement("div");
    dot.className = "dot";
    dot.style.left = (event.pageX - 4) + "px";
    dot.style.top = (event.pageY - 4) + "px";
    document.body.appendChild(dot);
});

// При передвижении указателя мыши генерится событие "mousemove".

//------------------------------------------------------------------------------
// События касания
//------------------------------------------------------------------------------

// Первоначально браузеры воспринимали устройства с серсорными экранами также
// как и мышку и генерили события "mousedown", "mouseup" и "click" при тапе по
// экрану. Позже были добавлены и свои собственные события, т.к. не все случаи
// покрывались таким интерфейсом. Когда палец касается экрана, то генерится
// событие "touchstart". При передвижении пальца, не отрывая его от экрана,
// генерится событие "touchmove". Когда палец отрывается от экрана, то генерится
// событие "touchend". Т.к. многие устройства могут распознать более одного
// касания, событие объекта хранит массиво-подобную структуру для координат
// событий касания: для каждого пальца свои clientX, clientY, pageX и pageY.

//------------------------------------------------------------------------------
// События скроллирования
//------------------------------------------------------------------------------

// При скроллировании какого-либо элемента генерится событие "scroll". Пример:

// Прогресс скроллирования сверху страницы.
document.body.appendChild(document.createTextNode("HELLO\n".repeat(10000)));
let bar = document.getElementById("progress");
window.addEventListener("scroll", () => {
    let maxHeight = document.body.scrollHeight - innerHeight;
    bar.style.width = `${(pageYOffset / maxHeight) * 100}%`;
});

//------------------------------------------------------------------------------
// События фокуса
//------------------------------------------------------------------------------

// Когда объект получает фокус, то браузер генерит событие "focus". При потере
// фокуса генерится событие "blue".
let inputName = document.getElementById("firstName");
let help_paragraph = document.getElementById("help");
inputName.addEventListener("focus", () => { help_paragraph.textContent = "Focused"; });
inputName.addEventListener("blur", () => { help_paragraph.textContent = "Not focused"; });
