//------------------------------------------------------------------------------
// Создание
//------------------------------------------------------------------------------

// JavaScript поддерживает регулярные выражения. Создать их можно либо
// с помощью конструктора либо используя специальный литерал регулярного
// выражения:

// Конструктор.
let re1 = new RegExp("pattern");
// Литерал.
let re2 = /pattern/;

// При использовании летерала для обозначения прямого слеша как части шаблона
// необходимо перед ним поставить обратный слеш. Перед некоторыми символами,
// которые имеют специальное значение в регулярных выражениях(?, + и др.) также
// необходимо ставить обратный слеш, чтобы они считались просто символом:
let eighteenPlus = /eighteen\+/;

//------------------------------------------------------------------------------
// Использование
//------------------------------------------------------------------------------

// С помощью метода test объекта регулярного можно узнать нашлось ли совпадение
// в переданном тексте:
console.log(re1.test("a pattern"));                    // true
console.log(re2.test("a regular expression pattern")); // true
console.log(eighteenPlus.test("eighteen+"));           // true
console.log();

//------------------------------------------------------------------------------
// Множество символов
//------------------------------------------------------------------------------

// В регулярных выражениях с помощью квадратных скобок можно указать множество
// символов в качестве шаблона:

// Проверка наличия в строке хотя бы одной цифры.
let reDigits = /[01234567890]/;
console.log(reDigits.test("in 1992"));         // true
console.log(reDigits.test("in last century")); // false
let reDigits2 = /[0-9]/; // То же самое, что и /[01234567890]/.
console.log(reDigits2.test("HAL9000"));        // true
console.log();

// С помощью знака '-' между символами можно указать диапазон. Поэтому и стало
// возможным использование шаблона [0-9] в примере выше. Символы внутри
// диапазона определяются в возрастающем порядке Unicode кодов от начального
// символа до конечного. Некоторые наборы символов имеют свои собственные
// обозначения. Например, цифры можно обозначить как \d вместо [0-9]. Есть и
// другие сокращения:
//
//     \d - цифра
//     \w - буква или число
//     \s - пробельный символ(пробел, перенос строки и др.)
//     \D - не цифра
//     \W - не буква и не число
//     \S - не пробельный символ
//     .  - любой символ, кроме переноса строки
//
// Пример:
let reDateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(reDateTime.test("01-01-1970 00:00"));  // true
console.log(reDateTime.test("01-1-1970 00:00"));   // false
console.log(reDateTime.test("01-jan-1970 00:00")); // false
console.log();

// Специальные символы внутри квадратных скобок теряют свой специальные смысл.
// Например, [.] - это рег. выражение для символа точки, а не любого символа,
// кроме переноса строки.
console.log(/[.]/.test("HELLO")); // false, т.к. символ точки не найден.
console.log();

// Инвертировать набор символов можно поставив символ '^' после [:
let reNotBinary = /[^01]/;
console.log(reNotBinary.test("0010101000111110")); // false
console.log(reNotBinary.test("2010101000111110")); // true
console.log();

//------------------------------------------------------------------------------
// Повторение части шаблона
//------------------------------------------------------------------------------

// С помощью символов +, * и ? можно повторить символ, который стоит перед
// ними:
//
//     + - повторить символ 1 или большее количество раз
//     * - повторить символ 0 или большее количество раз
//     ? - повторить символ 0 или один раз
//
// Примеры:
let reOneOrMoreDigit = /\d+/;
let reZeroOrMoreDigit = /\d*/;
let reNeighbor = /neighbou?r/;
console.log(reOneOrMoreDigit.test("at 6:00PM"));  // true
console.log(reOneOrMoreDigit.test("HELLO"));      // false
console.log(reZeroOrMoreDigit.test("at 6:00PM")); // true
console.log(reZeroOrMoreDigit.test("HELLO"));     // true
console.log(reNeighbor.test("neighbor"));         // true
console.log(reNeighbor.test("neighbour"));        // true
console.log();

// Точное количество совпадений можно указать с помощью числа в фигурных
// скобках. Например {4} означает повторить ровно 4 раза. Также внутри фигурных
// скобок можно указать мин. и макс. возможное количество совпадений:
// {min,max}. Можно также не указывать одну из границ. Например, {5,} означает
// повторить 5 или большее количество раз. Пример:
let reDateTime2 = /\d{1,2}-\d{1,2}-\d{4} \d{1,2}:\d{2}/;
console.log(reDateTime2.test("1-30-2003 8:45")); // true
