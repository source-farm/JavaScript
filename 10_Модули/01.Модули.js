
//------------------------------------------------------------------------------
// Модули
//------------------------------------------------------------------------------

// Для организации кода в модули в JavaScript можно воспользоваться системой
// пакетов. Пакет может состоять из одного или более модулей и содержит
// информацию о том от каких модулей он зависит. Для того чтобы система пакетов
// работала должна быть построена соответствующая инфраструктура: должен быть
// некий сервис для удобного доступа к пакетам и их обновлению. В мире
// JavaScript'а для этого используется ресурс npmjs.org.

//------------------------------------------------------------------------------
// Старая система модулей
//------------------------------------------------------------------------------

// До 2015 года в JavaScript не поддерживал понятие модули. Поэтому на основе
// функционала самого языка было создано что-то наподобие модуля: объект,
// который содержит функции, которые и составляют модуль. Пример:

const weekDay = function() {
    const names = ["Sunday", "Monday", "Tuesday", "Wednesday",
                   "Thursday", "Friday", "Saturday"];

    return {
        name: function(number) { return names[number]; },
        number: function(name) { return names.indexOf(name); }
    };
}();

console.log(weekDay.name(weekDay.number("Sunday")));
console.log();

// Такой подход обеспечивает некую изоляцию кода, но не объявляет зависимости.

//------------------------------------------------------------------------------
// Исполнение кода
//------------------------------------------------------------------------------

// Существуют два способа для выполнения кода, который представлен в виде
// строки. Первый способ - это использование eval:
const x = 1;
function evalAndReturnX(code) {
    eval(code);
    return x;
}

console.log(evalAndReturnX("var x = 2;"));
console.log(x);
console.log();

// Второй - это использование конструктора Function. В качестве первого
// параметра он принимает список разделённых запятыми названий параметров
// функции, а второй параметр - это тело функции. На основе этих данных
// Function создаёт функцию:
let plusOne = Function("x", "return x + 1;");
console.log(plusOne(41));
console.log();

//------------------------------------------------------------------------------
// CommonJS модули
//------------------------------------------------------------------------------

// Наиболее распространённым способом оформления модулей в JavaScript является
// так называемый CommonJS. Этой схемой пользуется Node.js и большинство пакетов
// на NPM. В нём для импортирования модуля используется вызов require:

// Импортирование модуля ordinal(предварительно должен быть установлен в
// системе командой "sudo npm -g i ordinal").
const ordinal = require("ordinal");
console.log(ordinal(1));
console.log(ordinal(42));

//------------------------------------------------------------------------------
// ECMAScript модули
//------------------------------------------------------------------------------

// С 2015 в JavaScript появилась поддержка работы с модулями на уровне языка.
// Такую систему модулей стали называть ES модулями.
import ordinal from "ordinal";

// Для экспорта используется ключевое слово export(может использоваться не
// только с функциями, но и с var, let, const).
export function foo();

// При импортировании модуля происходит импортирование связываний из этого
// модуля, а не значений. Связывание с именем default является значением,
// которое импортируется по-умолчанию. Т.е. если просто импортировать модуль, не
// заключая в фигурные скобки название связывания, то из модуля будет
// импортировано связывание под названием default.
// Импортирование происходит до того как скрипт начнёт выполняться. Это
// означает, что нельзя использовать import в внутри функций или блоков. Также
// название модулей должны быть сроками в кавычках.

//------------------------------------------------------------------------------
// Сборка и объединение
//------------------------------------------------------------------------------

// Многие проекты JavaScript технически даже не написаны на JavaScript.
// Благодаря существованию так называемых транспилеров можно написать код на
// одном из диалектов JavaScript и позже перевести этот код на JavaScript.

// Если наша программа на JavaScript имеет очень много зависимостей, то для
// ускорения скачивания сайта создать один файл, который состоит из нашей
// программы и всех её зависимостей(обычно быстрее можно скачать один большой
// файл, чем несколько маленьких). Такую операцию называют объединением(bundle).

// Существует также так называемая операция минификации - удаление из кода
// комментариев, пробельных символов и т.д. Это позволяет ещё больше увеличить
// скорость скачивания.
